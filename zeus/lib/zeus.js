// Generated by CoffeeScript 1.4.0
(function() {
  var ConfigSetting, Context, Environment, ServiceInstance, UIService, ZeusService, Zeusfile, context, findZeusfile, fs, init, load, path, service, winston,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  path = require('path');

  winston = require('winston');

  Zeusfile = exports.Zeusfile = require('./zeusfile');

  Context = exports.Context = require('./context');

  ZeusService = exports.ZeusService = require('./zeusservice');

  ConfigSetting = exports.ConfigSetting = require('./configsetting');

  Environment = exports.Environment = require('./environment');

  ServiceInstance = exports.ServiceInstance = require('./serviceinstance');

  UIService = exports.UIService = require('./ui');

  findZeusfile = function(ui, dir, callback) {
    var zfpath;
    zfpath = path.join(dir, 'Zeusfile');
    ui.log.verbose("searching for Zeusfile in " + dir);
    return fs.exists(zfpath, function(exists) {
      var newdir;
      if (exists) {
        return callback(null, zfpath);
      }
      newdir = path.dirname(dir);
      if (newdir === dir) {
        return callback(new Error("No Zeusfile found!"));
      } else {
        return findZeusfile(ui, newdir, callback);
      }
    });
  };

  init = function(ui, zfpath, appname, callback) {
    var context, zf;
    zf = new Zeusfile;
    zf.name = appname;
    ui.log.verbose('initializing Zeus context: ' + zfpath);
    context = new Context(zf, zfpath, ui);
    return context.loadPlugins(function(err) {
      if (err) {
        return callback(err);
      } else {
        return callback(null, context);
      }
    });
  };

  load = function(ui, zfpath, callback) {
    ui.log.verbose('reading Zeusfile: ' + zfpath);
    return fs.readFile(zfpath, function(err, data) {
      var context, zf;
      if (err) {
        return callback(err);
      } else {
        ui.log.verbose('reviving Zeusfile');
        zf = Zeusfile.revive(JSON.parse(data));
        context = new Context(zf, zfpath, ui);
        return context.loadPlugins(function(err) {
          if (err) {
            return callback(err);
          } else {
            return callback(null, context);
          }
        });
      }
    });
  };

  exports.version = (require('../package.json')).version;

  exports.context = context = function(ui, workingDirectory, appname, callback) {
    var zfpath, _ref;
    if (typeof appname === 'function') {
      _ref = [appname, null], callback = _ref[0], appname = _ref[1];
    }
    ui.log.verbose('loading Zeus context for ' + workingDirectory);
    zfpath = path.join(workingDirectory, 'Zeusfile');
    if (appname != null) {
      return fs.exists(zfpath, function(exists) {
        if (exists) {
          return callback(new Error("Can't create a new Zeusfile. There is already one in this directory"));
        } else {
          return init(ui, zfpath, appname, callback);
        }
      });
    } else {
      return findZeusfile(ui, workingDirectory, function(err, zfpath) {
        if (err) {
          return callback(err);
        } else {
          return load(ui, zfpath, callback);
        }
      });
    }
  };

  exports.service = service = function(ui, workingDirectory, serviceName, callback) {
    return exports.context(ui, workingDirectory, function(err, context) {
      if (err) {
        return callback(err);
      } else if (__indexOf.call(context.zf.services, serviceName) >= 0) {
        return callback(null, context, context.zf.services[serviceName]);
      } else {
        return callback(new Error("Service not defined: " + serviceName));
      }
    });
  };

  module.exports = exports;

}).call(this);
