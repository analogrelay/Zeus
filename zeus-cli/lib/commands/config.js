// Generated by CoffeeScript 1.4.0
(function() {
  var zeus, _;

  zeus = require('zeus');

  _ = require('underscore');

  exports.init = function(ui) {
    var add, config, list, log, remove;
    log = ui.cli.output;
    config = ui.cli.category('config').description("Manage configuration settings in Zeus services");
    add = function(service, name, template, options, cb) {
      return zeus.service(ui, process.cwd(), service, function(err, context, service) {
        if (err != null) {
          throw err;
        }
        if (service.config.hasOwnProperty(name)) {
          return ui.log.error("Config setting already defined: " + name);
        } else {
          service.config[name] = new zeus.ConfigSetting(template, !options.optional);
          return context.save(cb);
        }
      });
    };
    list = function(service, options, cb) {
      return zeus.context(ui, process.cwd(), function(err, context) {
        var services;
        if (err != null) {
          throw err;
        }
        services = context.zeusfile.services;
        if (service != null) {
          if (context.zeusfile.services.hasOwnProperty(service)) {
            services = {};
            services[service] = context.zeusfile[service];
          } else {
            throw new Error('No such service: ' + name);
          }
        }
        _.each(services, function(service, name, list) {
          ui.log.info('Config for ' + name + ':');
          return _.each(service.config, function(value, name, list) {
            return ui.log.help((value.required ? " ! ".red.bold : " ? ".cyan.bold) + name + " = " + (value.template || '<no value>'));
          });
        });
        ui.log.help('');
        ui.log.help('!'.red.bold + ' = Required, ' + '?'.cyan.bold + ' = Optional');
        return cb();
      });
    };
    remove = function(service, name, options, cb) {
      return zeus.service(ui, process.cwd(), service, function(err, context, service) {
        if (err != null) {
          throw err;
        }
        if (service.config.hasOwnProperty(name)) {
          delete service.config[name];
          return context.save(cb);
        } else {
          return ui.log.error("Config setting not defined: " + name);
        }
      });
    };
    config.command('add <service> <name> [template]').option('-o, --optional', 'Mark this setting as optional').description('Adds a configuration setting to the specified service').execute(add);
    config.command('list [service]').description('Lists configuration settings in the current Zeusfile').execute(list);
    return config.command('remove <service> <name>').description('Removes a config setting from the specified service').execute(remove);
  };

}).call(this);
